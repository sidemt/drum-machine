const Q = 'Q', W = 'W', E = 'E', 
      A = 'A', S = 'S', D = 'D',
      Z = 'Z', X = 'X', C = 'C';

var audioPaths = {
  Q: "https://res.cloudinary.com/cd0hgkqgk/video/upload/v1538335238/audio/nipon_cymbal_1.mp3",
  W: "https://res.cloudinary.com/cd0hgkqgk/video/upload/v1538335237/audio/nipon_cymbal_2.mp3",
  E: "https://res.cloudinary.com/cd0hgkqgk/video/upload/v1538335238/audio/taiko_2.mp3",
  A: "https://res.cloudinary.com/cd0hgkqgk/video/upload/v1538335237/audio/med_taiko.mp3",
  S: "https://res.cloudinary.com/cd0hgkqgk/video/upload/v1538335238/audio/taiko_1.mp3",
  D: "https://res.cloudinary.com/cd0hgkqgk/video/upload/v1538335238/audio/big_taiko.mp3",
  Z: "https://res.cloudinary.com/cd0hgkqgk/video/upload/v1538335238/audio/shime_hi.mp3",
  X: "https://res.cloudinary.com/cd0hgkqgk/video/upload/v1538335238/audio/shime_mute.mp3",
  C: "https://res.cloudinary.com/cd0hgkqgk/video/upload/v1538335238/audio/shime_hi_2.mp3"
}

var audElements = {};

var soundNames = {
  Q: "nipon_cymbal_1",
  W: "nipon_cymbal_2",
  E: "taiko_2",
  A: "med_taiko",
  S: "taiko_1",
  D: "big_taiko",
  Z: "shime_hi",
  X: "shime_mute",
  C: "shime_hi_2"
}

function playSound(audElement) {
  audElement.load();
  var playPromise = audElement.play();
  if (playPromise !== undefined) {
    playPromise.catch(error => {
      console.log(error);
    });
  }
}

class DrumMachine extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      message: ''
    };
    this.triggerDrum = this.triggerDrum.bind(this);
    this.handleKeyPress = this.handleKeyPress.bind(this);
    this.handleClick = this.handleClick.bind(this);
  };
 
  componentDidMount() {
    document.addEventListener('keydown', this.handleKeyPress);
    
    audElements = {
      Q: document.getElementById(Q),
      W: document.getElementById(W),
      E: document.getElementById(E),
      A: document.getElementById(A),
      S: document.getElementById(S),
      D: document.getElementById(D),
      Z: document.getElementById(Z),
      X: document.getElementById(X),
      C: document.getElementById(C)
    };
  }
  componentWillUnmount() {
    document.removeEventListener('keydown', this.handleKeyPress);
    audElements = {};
  }
  triggerDrum(key){
    playSound(audElements[key]);
    this.setState({
      message: soundNames[key]
    });
  }
  handleClick(event){
    this.triggerDrum(event.target.innerText);
  }
  handleKeyPress(event){
    switch (event.keyCode){
      case 81: // Q
        this.triggerDrum(Q, event.target.id);
        break;
      case 87: // W
        this.triggerDrum(W);
        break;
      case 69: // E
        this.triggerDrum(E);
        break;
      case 65: // A
        this.triggerDrum(A);
        break;
      case 83: // S
        this.triggerDrum(S);
        break;
      case 68: // D
        this.triggerDrum(D);
        break;
      case 90: // Z
        this.triggerDrum(Z);
        break;
      case 88: // X
        this.triggerDrum(X);
        break;
      case 67: // C
        this.triggerDrum(C);
        break;
        
      default:
        this.setState({
          message: ''
        });
        break;
    }
  }
  render() {
    return(
      <div>
        <div className="drum-pad-row">
          <RenderDisplay message={this.state.message} />
        </div>
        <div className="drum-pad-row">
          <RenderDrumPad soundName={soundNames[Q]} keyName={Q} onClick={this.handleClick} audSrc={audioPaths[Q]} />
          <RenderDrumPad soundName={soundNames[W]} keyName={W} onClick={this.handleClick} audSrc={audioPaths[W]} />
          <RenderDrumPad soundName={soundNames[E]} keyName={E} onClick={this.handleClick} audSrc={audioPaths[E]} />
        </div>
        <div className="drum-pad-row">
          <RenderDrumPad soundName={soundNames[A]} keyName={A} onClick={this.handleClick} audSrc={audioPaths[A]} />
          <RenderDrumPad soundName={soundNames[S]} keyName={S} onClick={this.handleClick} audSrc={audioPaths[S]} />
          <RenderDrumPad soundName={soundNames[D]} keyName={D} onClick={this.handleClick} audSrc={audioPaths[D]} />
        </div>
        <div className="drum-pad-row">
          <RenderDrumPad soundName={soundNames[Z]} keyName={Z} onClick={this.handleClick} audSrc={audioPaths[Z]} />
          <RenderDrumPad soundName={soundNames[X]} keyName={X} onClick={this.handleClick} audSrc={audioPaths[X]} />
          <RenderDrumPad soundName={soundNames[C]} keyName={C} onClick={this.handleClick} audSrc={audioPaths[C]} />
        </div>
       </div>
    );
  }
};

class RenderDisplay extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div id="display">{this.props.message}</div>
    );
  }
};

class RenderDrumPad extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div className="drum-pad" id={this.props.soundName} onClick={this.props.onClick} >
        {this.props.keyName}
        <audio preload="auto" id={this.props.keyName} className="clip" src={this.props.audSrc}></audio>
      </div>
    );
  }
};

ReactDOM.render(
  <DrumMachine />,
  document.getElementById("drum-machine")
);
